// Teste final da corre√ß√£o do p√≥s-voo
console.log('üéØ TESTE FINAL - Corre√ß√£o do P√≥s-voo');
console.log('=' .repeat(50));

// Simular exatamente a l√≥gica corrigida do SmartCalendar
function testSlot(date, time, blockedUntilUTC, eventStartUTC) {
  const [hours, minutes] = time.split(':').map(Number);
  const slotDateTime = new Date(date);
  slotDateTime.setHours(hours, minutes, 0, 0);
  
  // Converter blocked_until de UTC para hor√°rio brasileiro
  const blockedUntil = new Date(blockedUntilUTC.getTime() - (3 * 60 * 60 * 1000));
  
  // Verificar se o slot est√° bloqueado
  const slotEnd = new Date(slotDateTime.getTime() + (60 * 60 * 1000));
  const eventStartBRT = new Date(eventStartUTC.getTime() - (3 * 60 * 60 * 1000));
  const isBlocked = slotDateTime < blockedUntil && slotEnd > eventStartBRT;
  
  return {
    slotDateTime,
    blockedUntil,
    isBlocked
  };
}

// Dados do teste (baseado no backend)
const date = new Date('2025-09-15T00:00:00-03:00'); // 15 de setembro, hor√°rio brasileiro
const blockedUntilUTC = new Date('2025-09-16T01:00:00.000Z'); // 22:00 BRT = 01:00 UTC dia seguinte
const eventStartUTC = new Date('2025-09-15T18:00:00.000Z'); // 15:00 BRT = 18:00 UTC

console.log('üìä Cen√°rio de teste:');
console.log(`   Data: ${date.toLocaleDateString('pt-BR')}`);
console.log(`   blocked_until UTC: ${blockedUntilUTC.toISOString()}`);
console.log(`   blocked_until BRT: ${new Date(blockedUntilUTC.getTime() - (3 * 60 * 60 * 1000)).toLocaleString('pt-BR')}`);
console.log('');

// Testar slots espec√≠ficos
const testSlots = [
  { time: '19:00', expected: 'DISPON√çVEL' },
  { time: '20:00', expected: 'DISPON√çVEL' },
  { time: '21:00', expected: 'DISPON√çVEL' },
  { time: '22:00', expected: 'BLOQUEADO' },
  { time: '23:00', expected: 'BLOQUEADO' }
];

console.log('üïê Resultados:');
testSlots.forEach(({ time, expected }) => {
  const result = testSlot(date, time, blockedUntilUTC, eventStartUTC);
  const actual = result.isBlocked ? 'BLOQUEADO' : 'DISPON√çVEL';
  const correct = actual === expected;
  
  console.log(`   ${time}: ${actual} ${correct ? '‚úÖ' : '‚ùå'} (esperado: ${expected})`);
  if (time === '22:00') {
    console.log(`     Debug: slot=${result.slotDateTime.toLocaleString('pt-BR')}, blocked=${result.blockedUntil.toLocaleString('pt-BR')}`);
  }
});

console.log('');
console.log('üéØ Status:');
const correctResults = testSlots.filter(({ time, expected }) => {
  const result = testSlot(date, time, blockedUntilUTC, eventStartUTC);
  const actual = result.isBlocked ? 'BLOQUEADO' : 'DISPON√çVEL';
  return actual === expected;
});

if (correctResults.length === testSlots.length) {
  console.log('   ‚úÖ TODOS OS SLOTS CORRETOS! Problema resolvido!');
} else {
  console.log(`   ‚ùå ${correctResults.length}/${testSlots.length} slots corretos. Ainda h√° problemas.`);
}

console.log('');
console.log('üí° Explica√ß√£o do que deveria acontecer:');
console.log('   ‚Ä¢ Miss√£o termina √†s 18:00 BRT');
console.log('   ‚Ä¢ P√≥s-voo de 3h: 18:00 + 1h (volta) + 3h (manuten√ß√£o) = 22:00 BRT');
console.log('   ‚Ä¢ Slots 19:00, 20:00, 21:00 devem estar DISPON√çVEIS');
console.log('   ‚Ä¢ Slots 22:00+ devem estar BLOQUEADOS');