import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Plane, 
  Clock, 
  AlertTriangle, 
  CheckCircle, 
  XCircle,
  Info
} from 'lucide-react';
import { format } from 'date-fns';
import { ptBR } from 'date-fns/locale';
import { validarHorarioCalendario } from '@/services/missionValidator';

const TestValidationExample: React.FC = () => {
  const [selectedTime, setSelectedTime] = useState<Date | null>(null);
  const [validationResult, setValidationResult] = useState<any>(null);

  // Simular bookings de teste - CEN√ÅRIO REAL DO USU√ÅRIO
  const mockBookings = [
    {
      id: 1,
      departure_date: '2024-12-15',
      departure_time: '14:00',
      return_date: '2024-12-15', 
      return_time: '16:00', // P√≥s-voo termina √†s 19:00 (16:00 + 3h)
      flight_hours: 2,
      origin: 'S√£o Paulo',
      destination: 'Rio de Janeiro'
    }
  ];

  // Hor√°rios de teste - CEN√ÅRIO ESPEC√çFICO
  const testTimes = [
    { time: '19:00', description: 'Tentativa √†s 19:00 (fim do p√≥s-voo)' },
    { time: '19:30', description: 'Tentativa √†s 19:30 (30min ap√≥s p√≥s-voo)' },
    { time: '20:00', description: 'Tentativa √†s 20:00 (1h ap√≥s p√≥s-voo)' },
    { time: '21:00', description: 'Tentativa √†s 21:00 (2h ap√≥s p√≥s-voo)' },
    { time: '22:00', description: 'Tentativa √†s 22:00 (3h ap√≥s p√≥s-voo)' }
  ];

  const testValidation = (timeString: string) => {
    const today = new Date('2024-12-15'); // Data fixa para teste
    const [hours, minutes] = timeString.split(':').map(Number);
    const testTime = new Date(today.getFullYear(), today.getMonth(), today.getDate(), hours, minutes);
    
    setSelectedTime(testTime);
    
    // Validar o hor√°rio
    const result = validarHorarioCalendario(testTime, mockBookings, 2);
    setValidationResult(result);
    
    // console.log('üîç Teste de valida√ß√£o:');
    // console.log('üîç Hor√°rio testado:', testTime.toLocaleString('pt-BR'));
    // console.log('üîç Resultado:', result);
    
    // Debug detalhado
    // console.log('üîç Voo existente: 14:00 - 16:00');
    // console.log('üîç P√≥s-voo: 16:00 - 19:00 (3h)');
    // console.log('üîç Para decolar √†s', timeString, 'precisa de 3h livres antes');
    // console.log('üîç Per√≠odo necess√°rio:', new Date(testTime.getTime() - 3 * 60 * 60 * 1000).toLocaleTimeString('pt-BR'), 'at√©', testTime.toLocaleTimeString('pt-BR'));
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Info className="h-5 w-5 text-blue-600" />
            <span>Teste: Valida√ß√£o das 3 Horas - CEN√ÅRIO REAL</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
              <h4 className="font-medium text-yellow-800 mb-2">Cen√°rio de Teste (SEU EXEMPLO):</h4>
              <p className="text-sm text-yellow-700">
                <strong>Voo existente:</strong> 14:00 - 16:00 (2h de voo)<br/>
                <strong>P√≥s-voo:</strong> 16:00 - 19:00 (3h de encerramento)<br/>
                <strong>Pr√≥ximo voo poss√≠vel:</strong> 22:00 (3h livres antes)
              </p>
            </div>
            
            <p className="text-gray-600">
              Teste diferentes hor√°rios para ver como o sistema valida a regra das 3 horas.
            </p>
            
            {/* Bot√µes de teste */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-3">
              {testTimes.map((test, index) => (
                <Button
                  key={index}
                  variant="outline"
                  onClick={() => testValidation(test.time)}
                  className="flex flex-col items-center space-y-1 h-auto py-3"
                >
                  <span className="font-medium">{test.time}</span>
                  <span className="text-xs text-gray-500 text-center">{test.description}</span>
                </Button>
              ))}
            </div>

            {/* Resultado da valida√ß√£o */}
            {selectedTime && validationResult && (
              <div className={`mt-4 p-4 rounded-lg border ${
                validationResult.valido 
                  ? 'bg-green-50 border-green-200' 
                  : 'bg-red-50 border-red-200'
              }`}>
                <div className="flex items-start space-x-3">
                  {validationResult.valido ? (
                    <CheckCircle className="h-5 w-5 text-green-600 mt-0.5" />
                  ) : (
                    <XCircle className="h-5 w-5 text-red-600 mt-0.5" />
                  )}
                  <div className="flex-1">
                    <h4 className="font-medium mb-2">
                      Teste: {format(selectedTime, 'dd/MM/yyyy √†s HH:mm', { locale: ptBR })}
                    </h4>
                    <p className="text-sm mb-2">{validationResult.mensagem}</p>
                    
                    {!validationResult.valido && validationResult.sugerido && (
                      <div className="mt-3 p-3 bg-blue-50 border border-blue-200 rounded">
                        <p className="text-sm font-medium text-blue-800 mb-2">
                          üí° Sugest√£o do Sistema:
                        </p>
                        <p className="text-sm text-blue-700">
                          Pr√≥ximo hor√°rio dispon√≠vel: {format(validationResult.sugerido, 'dd/MM/yyyy √†s HH:mm', { locale: ptBR })}
                        </p>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* Explica√ß√£o da regra */}
            <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
              <h4 className="font-medium text-blue-800 mb-2 flex items-center">
                <AlertTriangle className="h-4 w-4 mr-2" />
                Como funciona a valida√ß√£o (SEU CEN√ÅRIO):
              </h4>
              <div className="space-y-2 text-sm text-blue-700">
                <p>‚Ä¢ <strong>19:00:</strong> ‚ùå Indispon√≠vel (fim do p√≥s-voo, precisa de 3h livres)</p>
                <p>‚Ä¢ <strong>19:30:</strong> ‚ùå Indispon√≠vel (s√≥ 30min livre, precisa de 3h)</p>
                <p>‚Ä¢ <strong>20:00:</strong> ‚ùå Indispon√≠vel (s√≥ 1h livre, precisa de 3h)</p>
                <p>‚Ä¢ <strong>21:00:</strong> ‚ùå Indispon√≠vel (s√≥ 2h livres, precisa de 3h)</p>
                <p>‚Ä¢ <strong>22:00:</strong> ‚úÖ Dispon√≠vel (3h livres: 19:00-22:00)</p>
              </div>
            </div>

            {/* Fluxo no calend√°rio */}
            <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
              <h4 className="font-medium text-green-800 mb-2 flex items-center">
                <Clock className="h-4 w-4 mr-2" />
                No Calend√°rio Inteligente:
              </h4>
              <div className="space-y-2 text-sm text-green-700">
                <p>‚Ä¢ <strong>Slots 19:00, 19:30, 20:00, 21:00:</strong> Aparecem em vermelho com ‚ùå</p>
                <p>‚Ä¢ <strong>Tooltip:</strong> "‚õî Indispon√≠vel: s√≥ pode decolar a partir de 22:00"</p>
                <p>‚Ä¢ <strong>Clique bloqueado:</strong> N√£o consegue selecionar esses hor√°rios</p>
                <p>‚Ä¢ <strong>Slot 22:00:</strong> Aparece em verde com ‚úÖ e √© clic√°vel</p>
              </div>
            </div>

            {/* Debug t√©cnico */}
            <div className="mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <h4 className="font-medium text-gray-800 mb-2 flex items-center">
                <Info className="h-4 w-4 mr-2" />
                Debug T√©cnico:
              </h4>
              <div className="space-y-2 text-sm text-gray-700">
                <p>‚Ä¢ <strong>P√≥s-voo termina:</strong> 19:00</p>
                <p>‚Ä¢ <strong>Para decolar √†s 20:00:</strong> Precisa de 3h livres (17:00-20:00)</p>
                <p>‚Ä¢ <strong>Conflito:</strong> P√≥s-voo ocupa 16:00-19:00</p>
                <p>‚Ä¢ <strong>Resultado:</strong> S√≥ 1h livre (19:00-20:00), precisa de 3h</p>
                <p>‚Ä¢ <strong>Solu√ß√£o:</strong> Pr√≥ximo voo poss√≠vel √†s 22:00 (3h livres: 19:00-22:00)</p>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default TestValidationExample;
