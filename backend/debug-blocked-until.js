const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function debugBlockedUntil() {
  try {
    console.log('üîç DEBUG: Como blocked_until est√° sendo calculado');
    console.log('=' .repeat(60));
    
    // Limpar dados
    await prisma.booking.deleteMany({});
    
    // Cen√°rio: Miss√£o que DEVERIA ter p√≥s-voo at√© 22:00 do mesmo dia
    console.log('üìù Cen√°rio:');
    console.log('   ‚Ä¢ Partida: 15:00 BRT (usu√°rio seleciona)');
    console.log('   ‚Ä¢ Retorno: 18:00 BRT (usu√°rio seleciona)');
    console.log('   ‚Ä¢ Flight hours: 2h (1h ida + 1h volta)');
    console.log('   ‚Ä¢ P√≥s-voo esperado: 18:00 + 1h + 3h = 22:00 BRT');
    console.log('');
    
    // Criar booking simulando exatamente o que o frontend faz
    const departureDateTime = new Date('2025-09-15T18:00:00.000Z'); // 15:00 BRT
    const returnDateTime = new Date('2025-09-15T21:00:00.000Z');    // 18:00 BRT
    const flight_hours = 2;
    
    console.log('üßÆ C√°lculo do backend (bookings.ts linha 164-170):');
    console.log(`   departureDateTime: ${departureDateTime.toISOString()} (${departureDateTime.toLocaleString('pt-BR')})`);
    console.log(`   returnDateTime: ${returnDateTime.toISOString()} (${returnDateTime.toLocaleString('pt-BR')})`);
    
    // ESTE √â O C√ÅLCULO EXATO DO BACKEND:
    const returnFlightTime = flight_hours / 2; // 1h (tempo de volta)
    const blockedUntil = new Date(returnDateTime.getTime() + (returnFlightTime + 3) * 60 * 60 * 1000);
    
    console.log(`   returnFlightTime: ${returnFlightTime}h`);
    console.log(`   (returnFlightTime + 3): ${returnFlightTime + 3}h`);
    console.log(`   blocked_until calculado: ${blockedUntil.toISOString()}`);
    console.log(`   blocked_until BRT: ${blockedUntil.toLocaleString('pt-BR')}`);
    console.log('');
    
    // Verificar se est√° correto
    const expectedBlockedUntilBRT = new Date('2025-09-15T22:00:00-03:00'); // 22:00 BRT
    const expectedBlockedUntilUTC = new Date('2025-09-16T01:00:00.000Z');   // 01:00 UTC dia seguinte
    
    console.log('‚úÖ Verifica√ß√£o:');
    console.log(`   Esperado BRT: ${expectedBlockedUntilBRT.toLocaleString('pt-BR')}`);
    console.log(`   Esperado UTC: ${expectedBlockedUntilUTC.toISOString()}`);
    console.log(`   Calculado UTC: ${blockedUntil.toISOString()}`);
    console.log(`   Est√° correto: ${blockedUntil.toISOString() === expectedBlockedUntilUTC.toISOString() ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    console.log('');
    
    // Testar a convers√£o para BRT no frontend
    console.log('üîÑ Convers√£o no frontend:');
    const frontendBRT = new Date(blockedUntil.getTime() - (3 * 60 * 60 * 1000));
    console.log(`   blocked_until UTC: ${blockedUntil.toISOString()}`);
    console.log(`   Convers√£o BRT (UTC - 3h): ${frontendBRT.toLocaleString('pt-BR')}`);
    console.log(`   Deveria ser 22:00: ${frontendBRT.getHours() === 22 ? '‚úÖ SIM' : '‚ùå N√ÉO (√© ' + frontendBRT.getHours() + 'h)'}`);
    console.log('');
    
    if (frontendBRT.getHours() !== 22) {
      console.log('üö® PROBLEMA ENCONTRADO!');
      console.log(`   O frontend est√° convertendo ${blockedUntil.toISOString()} para ${frontendBRT.toLocaleString('pt-BR')}`);
      console.log(`   Mas deveria ser 22:00 do dia 15/09`);
      console.log('');
      console.log('üí° Poss√≠veis causes:');
      console.log('   1. Backend est√° calculando errado');
      console.log('   2. Frontend est√° convertendo errado');
      console.log('   3. Confus√£o entre fusos hor√°rios');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

debugBlockedUntil().catch(console.error);