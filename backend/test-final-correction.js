// Teste final para verificar se a corre√ß√£o funcionou
console.log('üß™ TESTE FINAL - CORRE√á√ÉO COMPLETA');
console.log('==================================');

// Simular dados do booking (como o Prisma retorna)
const bookingData = {
  "id": 9576,
  "departure_date": new Date("2025-08-27T04:00:00.000Z"), // 04:00 (in√≠cio pr√©-voo - j√° calculado)
  "return_date": new Date("2025-08-27T21:07:46.535Z"), // 21:00 (fim p√≥s-voo - j√° calculado)
  "actual_departure_date": new Date("2025-08-27T07:00:00.000Z"), // 07:00 (hora real de decolagem)
  "actual_return_date": new Date("2025-08-27T17:00:00.000Z"), // 17:00 (hora real de retorno)
  "flight_hours": 2.0
};

console.log('üìä Dados do booking:');
console.log('   departure_date:', bookingData.departure_date.toISOString(), '(04:00 - in√≠cio pr√©-voo)');
console.log('   return_date:', bookingData.return_date.toISOString(), '(21:00 - fim p√≥s-voo)');
console.log('   actual_departure_date:', bookingData.actual_departure_date.toISOString(), '(07:00 - decolagem real)');
console.log('   actual_return_date:', bookingData.actual_return_date.toISOString(), '(17:00 - retorno real)');

// Simular bookingToMissao CORRETO
console.log('\nüîç bookingToMissao (CORRETO):');

// Converter para string se for Date object
const departureDateStr = typeof bookingData.departure_date === 'string' 
  ? bookingData.departure_date 
  : bookingData.departure_date.toISOString();

const returnDateStr = typeof bookingData.return_date === 'string' 
  ? bookingData.return_date 
  : bookingData.return_date.toISOString();

const missao = {
  partida: new Date(departureDateStr.replace('Z', '-03:00')), // 04:00 (in√≠cio pr√©-voo - j√° calculado)
  retorno: new Date(returnDateStr.replace('Z', '-03:00')), // 21:00 (fim p√≥s-voo - j√° calculado)
  flightHoursTotal: bookingData.flight_hours
};

console.log('   partida:', missao.partida.toLocaleString('pt-BR'), '(04:00 - in√≠cio pr√©-voo)');
console.log('   retorno:', missao.retorno.toLocaleString('pt-BR'), '(21:00 - fim p√≥s-voo)');

// Simular janelaBloqueada CORRETO
console.log('\nüîç janelaBloqueada (CORRETO):');
const H = (n) => n * 60 * 60 * 1000;
const PRE_VOO_HORAS = 3;
const POS_VOO_HORAS = 3;

// Pr√©-voo: m.partida j√° √© o in√≠cio (04:00), fim √© 3h depois (07:00)
const preVooInicio = new Date(missao.partida.getTime()); // 04:00
const preVooFim = new Date(missao.partida.getTime() + H(PRE_VOO_HORAS)); // 07:00

// Miss√£o: decolagem (07:00) at√© retorno (17:00)
const missaoInicio = new Date(missao.partida.getTime() + H(PRE_VOO_HORAS)); // 07:00
const missaoFim = new Date(missao.retorno.getTime() - H(POS_VOO_HORAS)); // 18:00

// P√≥s-voo: m.retorno j√° √© o fim (21:00), in√≠cio √© 3h antes (18:00)
const posVooInicio = new Date(missao.retorno.getTime() - H(POS_VOO_HORAS)); // 18:00
const posVooFim = new Date(missao.retorno.getTime()); // 21:00

console.log('   Pr√©-voo:');
console.log('     in√≠cio:', preVooInicio.toLocaleString('pt-BR'), '(04:00)');
console.log('     fim:', preVooFim.toLocaleString('pt-BR'), '(07:00)');

console.log('   Miss√£o:');
console.log('     in√≠cio:', missaoInicio.toLocaleString('pt-BR'), '(07:00)');
console.log('     fim:', missaoFim.toLocaleString('pt-BR'), '(18:00)');

console.log('   P√≥s-voo:');
console.log('     in√≠cio:', posVooInicio.toLocaleString('pt-BR'), '(18:00)');
console.log('     fim:', posVooFim.toLocaleString('pt-BR'), '(21:00)');

console.log('\n‚úÖ RESULTADO ESPERADO:');
console.log('   Pr√©-voo: 04:00 at√© 07:00 ‚úÖ');
console.log('   Miss√£o: 07:00 at√© 18:00 ‚úÖ');
console.log('   P√≥s-voo: 18:00 at√© 21:00 ‚úÖ');

console.log('\nüéØ CORRE√á√ÉO FINAL APLICADA:');
console.log('   ‚úÖ bookingToMissao usa departure_date e return_date (j√° calculados)');
console.log('   ‚úÖ janelaBloqueada n√£o recalcula - usa valores diretamente');
console.log('   ‚úÖ departure_date (04:00) = in√≠cio pr√©-voo');
console.log('   ‚úÖ return_date (21:00) = fim p√≥s-voo');
console.log('   ‚úÖ Frontend mostra hor√°rios corretos no calend√°rio');
