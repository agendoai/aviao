// schema.prisma
// Prisma schema para o sistema de reservas de avião

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int      @id @default(autoincrement())
  name               String
  email              String   @unique
  password           String
  cpfCnpj            String?  // CPF/CNPJ obrigatório para Asaas
  phone              String?  // Telefone obrigatório para Asaas
  asaasCustomerId    String?  // Customer ID do Asaas
  asaasSubscriptionId String? // Subscription ID do Asaas
  role               String   @default("user")
  status             String   @default("active") // active, inactive - baseado na mensalidade
  resetToken         String?  // Token para recuperação de senha
  resetTokenExpiry   DateTime? // Expiração do token de recuperação
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
  bookings           Booking[]
  transactions       Transaction[]
  sharedMissions     SharedMission[] @relation("SharedMissionCreator")
  sharedBookings     SharedMissionBooking[]
  participationRequests ParticipationRequest[]
  chatMessages       ChatMessage[]
  membershipPayments MembershipPayment[]
}

model Aircraft {
  id           Int      @id @default(autoincrement())
  name         String
  registration String
  model        String
  seats        Int
  status       String   @default("available")
  hourlyRate   Float    @default(2800)
  overnightRate Float   @default(1500)
  bookings     Booking[]
  sharedMissions SharedMission[]
  schedules    AircraftSchedule[]
}

model Booking {
  id             Int      @id @default(autoincrement())
  userId         Int
  aircraftId     Int
  origin         String
  destination    String
  secondaryDestination String? // Destino secundário (opcional)
  departure_date String
  return_date    String
  actual_departure_date String? // Data real de ida (para exibição)
  actual_return_date String? // Data real de volta (para exibição)
  secondary_departure_time String? // Horário de saída do destino secundário
  passengers     Int      @default(1)
  flight_hours   Float    @default(2.0)
  overnight_stays Int     @default(0)
  value          Float
  status         String   @default("pendente")
  paymentId      String?
  blocked_until  DateTime? // Horário até quando a aeronave fica bloqueada (incluindo manutenção)
  maintenance_buffer_hours Int @default(3) // Horas de manutenção após o voo
  createdAt      DateTime @default(now())
  user           User     @relation(fields: [userId], references: [id])
  aircraft       Aircraft @relation(fields: [aircraftId], references: [id])
  transactions   Transaction[]
  schedule       AircraftSchedule?
}

model SharedMission {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  origin          String
  destination     String
  secondaryDestination String? // Destino secundário (opcional) - igual ao Booking
  departure_date  String
  return_date     String
  actual_departure_date String? // Data real de ida (para exibição)
  actual_return_date String? // Data real de volta (para exibição)
  secondary_departure_time String? // Horário de saída do destino secundário - igual ao Booking
  aircraftId      Int
  totalSeats      Int
  availableSeats  Int
  pricePerSeat    Float
  totalCost       Float    @default(0) // Custo total da missão
  overnightFee    Float    @default(0) // Taxa de pernoite por pessoa
  overnightStays  Int      @default(0) // Número de pernoites
  flight_hours    Float    @default(2.0) // Tempo total de voo
  paymentId       String? // ID do pagamento
  blocked_until   DateTime? // Horário até quando a aeronave fica bloqueada
  maintenance_buffer_hours Int @default(3) // Horas de manutenção após o voo
  status          String   @default("active") // active, completed, cancelled
  createdBy       Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  aircraft        Aircraft @relation(fields: [aircraftId], references: [id])
  creator         User     @relation("SharedMissionCreator", fields: [createdBy], references: [id])
  bookings        SharedMissionBooking[]
  participationRequests ParticipationRequest[]
}

model SharedMissionBooking {
  id              Int      @id @default(autoincrement())
  sharedMissionId Int
  userId          Int
  seats           Int      @default(1)
  totalPrice      Float
  status          String   @default("pending") // pending, confirmed, paid, cancelled
  paymentId       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sharedMission   SharedMission @relation(fields: [sharedMissionId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
}

model ParticipationRequest {
  id              Int      @id @default(autoincrement())
  sharedMissionId Int
  userId          Int
  status          String   @default("pending") // pending, accepted, rejected
  message         String?  // Mensagem inicial do pedido
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sharedMission   SharedMission @relation(fields: [sharedMissionId], references: [id])
  user            User     @relation(fields: [userId], references: [id])
  chatMessages    ChatMessage[]
}

model ChatMessage {
  id                    Int      @id @default(autoincrement())
  participationRequestId Int
  senderId              Int
  message               String
  messageType           String   @default("message") // message, acceptance, rejection
  createdAt             DateTime @default(now())
  readAt                DateTime? // When the message was read by the recipient
  participationRequest  ParticipationRequest @relation(fields: [participationRequestId], references: [id])
  sender                User     @relation(fields: [senderId], references: [id])
}

model Airport {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  name      String
  city      String
  state     String
  country   String
  stops     Stop[]
}

model Stop {
  id        Int      @id @default(autoincrement())
  name      String
  airportId Int
  airport   Airport  @relation(fields: [airportId], references: [id])
}

model Transaction {
  id          Int      @id @default(autoincrement())
  userId      Int
  bookingId   Int?
  amount      Float
  type        String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  booking     Booking? @relation(fields: [bookingId], references: [id])
}

model MembershipPayment {
  id          Int      @id @default(autoincrement())
  userId      Int
  value       Float
  dueDate     DateTime
  status      String   @default("pendente") // pendente, paga, atrasada
  paymentId   String?  // ID do pagamento no Asaas
  subscriptionId String? // ID da assinatura recorrente no Asaas
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model SystemConfig {
  id          Int      @id @default(autoincrement())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model AircraftSchedule {
  id                    Int      @id @default(autoincrement())
  aircraftId            Int
  startTime             DateTime // Horário de início do bloqueio
  endTime               DateTime // Horário de fim do bloqueio (incluindo manutenção)
  type                  String   // "booking", "maintenance", "unavailable"
  bookingId             Int?     @unique // ID da reserva (se for booking)
  description           String?  // Descrição do bloqueio
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  aircraft              Aircraft @relation(fields: [aircraftId], references: [id])
  booking               Booking? @relation(fields: [bookingId], references: [id])
}