import { prisma } from '../db';
import { syncUserPaymentsStatus } from './asaas';
import { updateUserStatus } from './userStatus';

// Fun√ß√£o para sincronizar automaticamente todas as cobran√ßas pendentes
export async function autoSyncAllPayments(): Promise<{ updated: number; errors: number }> {
  try {
    console.log('üîÑ Iniciando sincroniza√ß√£o autom√°tica de cobran√ßas...');
    
    // Buscar todos os usu√°rios com mensalidades pendentes
    const usersWithPendingPayments = await prisma.user.findMany({
      where: {
        role: 'user',
        membershipPayments: {
          some: {
            status: {
              in: ['pendente', 'atrasada']
            }
          }
        }
      },
      include: {
        membershipPayments: {
          where: {
            subscriptionId: { not: null }
          },
          orderBy: { createdAt: 'desc' },
          take: 1
        }
      }
    });

    console.log(`üìä Encontrados ${usersWithPendingPayments.length} usu√°rios com cobran√ßas pendentes`);

    let updated = 0;
    let errors = 0;

    for (const user of usersWithPendingPayments) {
      try {
        if (user.membershipPayments.length > 0 && user.membershipPayments[0].subscriptionId) {
          console.log(`üîÑ Sincronizando usu√°rio ${user.name} (ID: ${user.id})...`);
          
          const result = await syncUserPaymentsStatus(user.id, user.membershipPayments[0].subscriptionId);
          
          if (result.updated > 0) {
            console.log(`‚úÖ Usu√°rio ${user.name} atualizado: ${result.updated} mudan√ßas`);
            updated += result.updated;
          }
          
          errors += result.errors;
        }
      } catch (error) {
        console.error(`‚ùå Erro ao sincronizar usu√°rio ${user.id}:`, error);
        errors++;
      }
    }

    console.log(`üéØ Sincroniza√ß√£o autom√°tica conclu√≠da: ${updated} atualiza√ß√µes, ${errors} erros`);
    return { updated, errors };
    
  } catch (error) {
    console.error('‚ùå Erro na sincroniza√ß√£o autom√°tica:', error);
    throw error;
  }
}

// Fun√ß√£o para verificar automaticamente cobran√ßas vencidas
export async function checkOverduePayments(): Promise<{ updated: number; errors: number }> {
  try {
    console.log('‚è∞ Verificando cobran√ßas vencidas automaticamente...');
    
    const now = new Date();
    
    // Buscar mensalidades pendentes que est√£o vencidas
    const overdueMemberships = await prisma.membershipPayment.findMany({
      where: {
        status: 'pendente',
        dueDate: {
          lt: now // Vencimento menor que agora = vencida
        }
      },
      include: {
        user: true
      }
    });

    console.log(`üìä Encontradas ${overdueMemberships.length} mensalidades vencidas`);

    let updated = 0;
    let errors = 0;

    for (const membership of overdueMemberships) {
      try {
        console.log(`üîÑ Marcando mensalidade ${membership.id} como atrasada...`);
        
        // Marcar como atrasada
        await prisma.membershipPayment.update({
          where: { id: membership.id },
          data: { status: 'atrasada' }
        });

        // Atualizar status do usu√°rio
        await updateUserStatus(membership.userId);
        
        console.log(`‚úÖ Mensalidade ${membership.id} marcada como atrasada`);
        updated++;
        
      } catch (error) {
        console.error(`‚ùå Erro ao marcar mensalidade ${membership.id} como atrasada:`, error);
        errors++;
      }
    }

    console.log(`üéØ Verifica√ß√£o de vencimentos conclu√≠da: ${updated} atualiza√ß√µes, ${errors} erros`);
    return { updated, errors };
    
  } catch (error) {
    console.error('‚ùå Erro na verifica√ß√£o de vencimentos:', error);
    throw error;
  }
}

// Fun√ß√£o principal que executa todas as verifica√ß√µes autom√°ticas
export async function runAutoChecks(): Promise<void> {
  try {
    console.log('ü§ñ Iniciando verifica√ß√µes autom√°ticas...');
    
    // 1. Verificar cobran√ßas vencidas
    const overdueResult = await checkOverduePayments();
    
    // 2. Sincronizar com Asaas
    const syncResult = await autoSyncAllPayments();
    
    console.log('üéØ Verifica√ß√µes autom√°ticas conclu√≠das:');
    console.log(`  - Vencimentos verificados: ${overdueResult.updated} atualiza√ß√µes`);
    console.log(`  - Sincroniza√ß√µes: ${syncResult.updated} atualiza√ß√µes`);
    console.log(`  - Total de erros: ${overdueResult.errors + syncResult.errors}`);
    
  } catch (error) {
    console.error('‚ùå Erro nas verifica√ß√µes autom√°ticas:', error);
  }
}





