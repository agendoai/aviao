import { ScheduleService } from './scheduleService';

export class Scheduler {
  private static cleanupInterval: NodeJS.Timeout | null = null;
  private static isRunning = false;

  // Iniciar o scheduler
  static start(): void {
    if (this.isRunning) {
      // console.log('‚ö†Ô∏è Scheduler j√° est√° rodando');
      return;
    }

    // console.log('üöÄ Iniciando scheduler de agenda...');
    this.isRunning = true;

    // Limpeza di√°ria √†s 02:00
    this.scheduleDailyCleanup();
    
    // Verifica√ß√£o a cada 6 horas
    this.cleanupInterval = setInterval(async () => {
      try {
        // console.log('üîÑ Executando limpeza autom√°tica da agenda...');
        await ScheduleService.cleanupOldSlots();
        // console.log('‚úÖ Limpeza autom√°tica conclu√≠da');
      } catch (error) {
        console.error('‚ùå Erro na limpeza autom√°tica:', error);
      }
    }, 6 * 60 * 60 * 1000); // 6 horas

    // console.log('‚úÖ Scheduler iniciado com sucesso');
  }

  // Parar o scheduler
  static stop(): void {
    if (!this.isRunning) {
      // console.log('‚ö†Ô∏è Scheduler n√£o est√° rodando');
      return;
    }

    // console.log('üõë Parando scheduler...');
    this.isRunning = false;

    if (this.cleanupInterval) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }

    // console.log('‚úÖ Scheduler parado');
  }

  // Agendar limpeza di√°ria
  private static scheduleDailyCleanup(): void {
    const now = new Date();
    const nextCleanup = new Date();
    nextCleanup.setHours(2, 0, 0, 0); // 02:00

    // Se j√° passou das 02:00 hoje, agendar para amanh√£
    if (now.getHours() >= 2) {
      nextCleanup.setDate(nextCleanup.getDate() + 1);
    }

    const timeUntilCleanup = nextCleanup.getTime() - now.getTime();

    setTimeout(async () => {
      try {
        // console.log('üßπ Executando limpeza di√°ria da agenda...');
        await ScheduleService.cleanupOldSlots();
        // console.log('‚úÖ Limpeza di√°ria conclu√≠da');
        
        // Agendar pr√≥xima limpeza (24 horas)
        this.scheduleDailyCleanup();
      } catch (error) {
        console.error('‚ùå Erro na limpeza di√°ria:', error);
      }
    }, timeUntilCleanup);

    // console.log(`üìÖ Pr√≥xima limpeza di√°ria agendada para: ${nextCleanup.toLocaleString('pt-BR')}`);
  }

  // Executar limpeza manual
  static async runManualCleanup(): Promise<void> {
    try {
      // console.log('üßπ Executando limpeza manual...');
      await ScheduleService.cleanupOldSlots();
      // console.log('‚úÖ Limpeza manual conclu√≠da');
    } catch (error) {
      console.error('‚ùå Erro na limpeza manual:', error);
      throw error;
    }
  }

  // Verificar status do scheduler
  static getStatus(): { isRunning: boolean; nextCleanup?: Date } {
    return {
      isRunning: this.isRunning
    };
  }
}


