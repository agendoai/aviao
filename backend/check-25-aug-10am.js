// Verificar especificamente a miss√£o √†s 10:00 em 25/08/2025
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function check25Aug10AM() {
  console.log('üîç Verificando miss√£o √†s 10:00 em 25/08/2025...\n');

  try {
    // Buscar miss√£o espec√≠fica √†s 10:00
    const mission = await prisma.booking.findFirst({
      where: {
        departure_date: {
          gte: new Date(2025, 7, 25, 10, 0, 0),
          lt: new Date(2025, 7, 25, 10, 1, 0)
        },
        aircraftId: 2 // PR-FOM
      },
      include: {
        user: {
          select: { name: true }
        },
        aircraft: true
      }
    });

    if (!mission) {
      console.log('‚ùå Nenhuma miss√£o encontrada √†s 10:00 em 25/08/2025');
      console.log('üí° Crie uma miss√£o para testar o pr√©-voo');
      return;
    }

    console.log('‚úÖ Miss√£o encontrada:');
    console.log(`   ID: ${mission.id}`);
    console.log(`   Partida: ${mission.departure_date.toLocaleString('pt-BR')}`);
    console.log(`   Retorno: ${mission.return_date.toLocaleString('pt-BR')}`);
    console.log(`   Flight hours: ${mission.flight_hours}`);
    console.log(`   Status: ${mission.status}`);
    console.log(`   User: ${mission.user.name}`);
    console.log(`   Aircraft: ${mission.aircraft.registration}`);
    console.log('');

    // Testar a l√≥gica
    const H = (horas) => horas * 60 * 60 * 1000;
    const PRE_VOO_HORAS = 3;
    
    // Calcular pr√©-voo (3h ANTES)
    const preVooStart = new Date(mission.departure_date.getTime() - H(PRE_VOO_HORAS));
    const preVooEnd = new Date(mission.departure_date.getTime());
    
    console.log('üü° Pr√©-voo calculado:');
    console.log(`   In√≠cio: ${preVooStart.toLocaleString('pt-BR')}`);
    console.log(`   Fim: ${preVooEnd.toLocaleString('pt-BR')}`);
    console.log(`   Decolagem: ${mission.departure_date.toLocaleString('pt-BR')}`);
    
    // Verificar se est√° correto
    const hoursBefore = (mission.departure_date.getTime() - preVooStart.getTime()) / H(1);
    console.log(`\n‚úÖ Horas antes da decolagem: ${hoursBefore}h`);
    
    if (hoursBefore === 3) {
      console.log('‚úÖ L√≥gica correta! Pr√©-voo √© 3h ANTES da decolagem');
    } else {
      console.log('‚ùå L√≥gica incorreta!');
    }

    // Incluir as fun√ß√µes necess√°rias
    const calcularTempoVolta = (flightHoursTotal) => flightHoursTotal / 2;
    
    const janelaBloqueada = (missao) => {
      const tVoltaMs = calcularTempoVolta(missao.flightHoursTotal) * H(1);
      
      // Pr√©-voo: 3h ANTES da decolagem (07:00, 08:00, 09:00 para decolagem √†s 10:00)
      const preVooInicio = new Date(missao.partida.getTime() - H(PRE_VOO_HORAS));
      const preVooFim = new Date(missao.partida.getTime());
      
      // Miss√£o: decolagem at√© retorno (10:00 at√© 17:00)
      const missaoInicio = new Date(missao.partida.getTime());
      const missaoFim = new Date(missao.retorno.getTime() + (30 * 60 * 1000));
      
      // P√≥s-voo: retorno + tempo de voo volta + 3h buffer
      const pousoVolta = new Date(missao.retorno.getTime() + tVoltaMs);
      const posVooInicio = new Date(pousoVolta.getTime());
      const posVooFim = new Date(pousoVolta.getTime() + H(3));
      
      return [
        { inicio: preVooInicio, fim: preVooFim, tipo: 'pre-voo', missao },
        { inicio: missaoInicio, fim: missaoFim, tipo: 'missao', missao },
        { inicio: posVooInicio, fim: posVooFim, tipo: 'pos-voo', missao }
      ];
    };

    // Converter para formato Missao
    const missao = {
      partida: mission.departure_date,
      retorno: mission.return_date,
      flightHoursTotal: mission.flight_hours,
      id: mission.id,
      origin: mission.origin,
      destination: mission.destination
    };

    // Calcular janelas
    const janelas = janelaBloqueada(missao);
    
    console.log('\nüü° Janelas calculadas:');
    for (const janela of janelas) {
      console.log(`   ${janela.tipo}: ${janela.inicio.toLocaleString('pt-BR')} - ${janela.fim.toLocaleString('pt-BR')}`);
    }

    // Verificar se est√° correto para 10:00
    const expectedPreVooStart = new Date(2025, 7, 25, 7, 0, 0); // 07:00
    const expectedPreVooEnd = new Date(2025, 7, 25, 10, 0, 0); // 10:00
    const expectedMissaoStart = new Date(2025, 7, 25, 10, 0, 0); // 10:00
    const expectedMissaoEnd = new Date(2025, 7, 25, 17, 30, 0); // 17:30

    console.log('\nüìã Verifica√ß√£o:');
    console.log(`   Pr√©-voo esperado: ${expectedPreVooStart.toLocaleString('pt-BR')} - ${expectedPreVooEnd.toLocaleString('pt-BR')}`);
    console.log(`   Pr√©-voo calculado: ${janelas[0].inicio.toLocaleString('pt-BR')} - ${janelas[0].fim.toLocaleString('pt-BR')}`);
    console.log(`   Miss√£o esperada: ${expectedMissaoStart.toLocaleString('pt-BR')} - ${expectedMissaoEnd.toLocaleString('pt-BR')}`);
    console.log(`   Miss√£o calculada: ${janelas[1].inicio.toLocaleString('pt-BR')} - ${janelas[1].fim.toLocaleString('pt-BR')}`);

    const preVooCorrect = janelas[0].inicio.getTime() === expectedPreVooStart.getTime() && 
                         janelas[0].fim.getTime() === expectedPreVooEnd.getTime();
    const missaoCorrect = janelas[1].inicio.getTime() === expectedMissaoStart.getTime() && 
                         janelas[1].fim.getTime() === expectedMissaoEnd.getTime();

    if (preVooCorrect && missaoCorrect) {
      console.log('\n‚úÖ C√°lculos corretos!');
      console.log('üí° Se o frontend n√£o est√° mostrando isso, o problema √© no frontend');
    } else {
      console.log('\n‚ùå C√°lculos incorretos!');
    }

    // Simular o que o frontend deveria mostrar
    console.log('\nüéØ O que o frontend deveria mostrar:');
    console.log('   07:00-09:30 = Pr√©-voo (amarelo)');
    console.log('   10:00-17:00 = Miss√£o (cinza)');
    console.log('   17:00-20:00 = P√≥s-voo (laranja)');

  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await prisma.$disconnect();
  }
}

check25Aug10AM().catch(console.error);

